#include <stdio.h>
int binarySearch(int arr[], int size, int target) {
    int left = 0, right = size - 1;
     while (left <= right) {
        int mid = left + (right - left) / 2;
          if (arr[mid] == target) {
            return mid;  // Return the index if target is found
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    
    return -1;  // Return -1 if target is not found
}
void bubbleSort(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr1[] = {45, 4, 23, -11, 20, 5, 10, 50};
    int key1 = 5;
    int size1 = sizeof(arr1) / sizeof(arr1[0]);

    int arr2[] = {8, -2, 11, 8, 6, 3, 10, 0};
    int key2 = 2;
    int size2 = sizeof(arr2) / sizeof(arr2[0]);
    bubbleSort(arr1, size1);
    bubbleSort(arr2, size2);
    int result1 = binarySearch(arr1, size1, key1);
    int result2 = binarySearch(arr2, size2, key2);
    if (result1 != -1) {
        printf("Key element %d found in the position %d\n", key1, result1);
    } else {
        printf("Key element %d not found\n", key1);
    }
    if (result2 != -1) {
        printf("Key element %d found in the position %d\n", key2, result2);
    } else {
        printf("Key element %d not found\n", key2);
    }

    return 0;
}
