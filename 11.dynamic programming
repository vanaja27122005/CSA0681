def findPaths(m, n, N, i, j):
    MOD = 10**9 + 7
      dp = [[[0] * n for _ in range(m)] for _ in range(N + 1)]
    dp[0][i][j] = 1
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        for k in range(1, N + 1):
        for r in range(m):
            for c in range(n):
                for dr, dc in directions:
                    nr, nc = r + dr, c + dc
                    if 0 <= nr < m and 0 <= nc < n:
                        dp[k][r][c] += dp[k - 1][nr][nc]
                        dp[k][r][c] %= MOD
                    else:
                        dp[k][r][c] += 1  # Count the boundary movement
                        dp[k][r][c] %= MOD
       total_ways = sum(dp[N][r][c] for r in range(m) for c in range(n)) % MOD
    return total_ways
print(findPaths(2, 2, 2, 0, 0))  # Output: 6
print(findPaths(1, 3, 3, 0, 1))  # Output: 12
